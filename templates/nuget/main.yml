parameters:
  buildConfiguration: "Release"
  runInheritDoc: true
  runCodeCoverage: true
  codecovKey: "$(codecovKey)"
  changelogPath: "Changelog.md"
  releaseVersionHeaderPattern: '^##[ \t]*\[(\d+\.\d+\.\d+[0-9A-Za-z-.]*)\]'
  unreleasedVersionHeaderPattern: '^##[ \t]*\[Unreleased[ \t]*\((\d+\.\d+\.\d+[0-9A-Za-z-.]*)\)\]'
  nugetRestoreEndpoints: ""
  nugetRestorePats: ""
  nugetReleasePushEndpoint: "https://www.nuget.org/api/v2/package"
  nugetReleasePushPat: "$(nugetReleasePushPat)"
  nugetUnreleasedPrereleasePushEndpoint: ""
  nugetUnreleasedPrereleasePushPat: "$(nugetUnreleasedPrereleasePushPat)"
  nugetDistUrl: "https://dist.nuget.org/win-x86-commandline/v4.7.1/nuget.exe"
  githubPat: "$(githubPat)"
  dotnetSdkVersion: "7.0.102"
  dotnetRuntimeVersions: ["3.1.12", "5.0.3", "6.0.1", "7.0.2"]
  outOfProcessTestDependencies: []
  outOfProcessBuildDependencies: []
  runTests: true
  windowsOnly: false
  cacheYarnPackages: false

jobs:
# Windows
- job: "Windows"
  pool:
    vmImage: "windows-2022"
  variables:
    NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
    YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  steps:
  - template: "restore-build-test.yml"
    parameters:
      dotnetSdkVersion: ${{parameters.dotnetSdkVersion}}
      dotnetRuntimeVersions: ${{parameters.dotnetRuntimeVersions}}
      outOfProcessTestDependencies: ${{parameters.outOfProcessTestDependencies}}
      outOfProcessBuildDependencies: ${{parameters.outOfProcessBuildDependencies}}
      buildConfiguration: ${{parameters.buildConfiguration}}
      codecovKey: ${{parameters.codecovKey}}
      runCodeCoverage: ${{parameters.runCodeCoverage}}
      runTests: ${{parameters.runTests}}
      cacheYarnPackages: ${{parameters.cacheYarnPackages}}
  - template: "../shared/publish-working-directory.yml"
- ${{if eq(parameters.windowsOnly, 'false')}}:
  # Linux
  - job: "Linux"
    pool:
      vmImage: "ubuntu-22.04"
    variables:
      NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    steps:
    - template: "restore-build-test.yml"
      parameters:
        dotnetSdkVersion: ${{parameters.dotnetSdkVersion}}
        dotnetRuntimeVersions: ${{parameters.dotnetRuntimeVersions}}
        outOfProcessTestDependencies: ${{parameters.outOfProcessTestDependencies}}
        outOfProcessBuildDependencies: ${{parameters.outOfProcessBuildDependencies}}
        buildConfiguration: ${{parameters.buildConfiguration}}
        runCodeCoverage: false
        runTests: ${{parameters.runTests}} 
        cacheYarnPackages: ${{parameters.cacheYarnPackages}}
  # Mac
  - job: "MacOS"
    pool:
      vmImage: "macOS-12"
    steps:
    - template: "restore-build-test.yml"
      parameters:
        dotnetSdkVersion: ${{parameters.dotnetSdkVersion}}
        dotnetRuntimeVersions: ${{parameters.dotnetRuntimeVersions}}
        outOfProcessTestDependencies: ${{parameters.outOfProcessTestDependencies}}
        outOfProcessBuildDependencies: ${{parameters.outOfProcessBuildDependencies}}
        buildConfiguration: ${{parameters.buildConfiguration}}
        runCodeCoverage: false
        runTests: ${{parameters.runTests}}
        cacheYarnPackages: ${{parameters.cacheYarnPackages}}
# Deploy
- job: "Deploy"
  pool:
    vmImage: "windows-2022"
  variables:
    NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  dependsOn:
  - "Windows"
  - ${{if eq(parameters.windowsOnly, 'false')}}:
    - "Linux"
    - "MacOS"
  steps:
  - checkout: "none"
  - template: "../shared/download-working-directory.yml"
  - template: "../shared/find-new-version.yml"
    parameters:
      changelogPath: ${{parameters.changelogPath}}
      releaseVersionHeaderPattern: ${{parameters.releaseVersionHeaderPattern}}
      unreleasedVersionHeaderPattern: ${{parameters.unreleasedVersionHeaderPattern}}
      findUnreleasedPrereleaseVersion: ${{ne(parameters.nugetUnreleasedPrereleasePushEndpoint, '')}}
  # TODO this doesn't need to run if new version isn't defined
  - template: "./install-dotnet.yml"
    parameters:
      dotnetSdkVersion: ${{parameters.dotnetSdkVersion}}
      dotnetRuntimeVersions: ${{parameters.dotnetRuntimeVersions}}
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      if("${{parameters.runInheritDoc}}" -eq 'true'){
        "Installing InheritDoc:"
        dotnet tool install InheritDocTool --tool-path . --version 2.5.2 | Render-Body # Install to current dir https://github.com/dotnet/cli/issues/8368
        if($lastExitCode -ne 0){
          throw "Failed to install InheritDoc."
        }

        "Running InheritDoc:"
        ./InheritDoc.exe -b src -o | Render-Body
        if($lastExitCode -ne 0){
          throw "An error occurred when running InheritDoc."
        }
      }
    displayName: "Run InheritDoc"
    condition: and(succeeded(), ne(variables['newVersion'], ''))
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      "Restoring packages:"
      dotnet restore | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to restore packages."
      }

      "Packing Nuget package(s):"
      dotnet pack --no-restore --no-build --configuration "${{parameters.buildConfiguration}}" -p:PackageVersion=$env:NEWVERSION | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to pack package(s). A project probably isn't properly configured."
      }

      # Push using endpoint and api key
      "Pushing packages:"
      $nugetPushEndpoint = if($env:NEWVERSIONISRELEASE){"${{parameters.nugetReleasePushEndpoint}}"}else{"${{parameters.nugetUnreleasedPrereleasePushEndpoint}}"}
      $nugetPushPat = if($env:NEWVERSIONISRELEASE){"${{parameters.nugetReleasePushPat}}"}else{"${{parameters.nugetUnreleasedPrereleasePushPat}}"}
      $packages = get-childitem src *.nupkg -Recurse
      foreach($package in $packages) {
        $message = dotnet nuget push $package.fullname --source $nugetPushEndpoint --api-key $nugetPushPat
        $message | Render-body

        # 409 returned if a package with the provided ID and version already exists - https://docs.microsoft.com/en-us/nuget/api/package-publish-resource#push-a-package
        if($lastExitCode -ne 0){
          # So dirty
          if(($message.Length -gt 4) -and $message[4].Contains(" 409 ")){
            # If error occurred because package already exists, allow pipeline to continue
            "$($package.name) already exists in feed $nugetPushEndpoint..."
          }else{
            throw "An unexpected error occurred while attempting to publish $package. If it was an intermittent issue, do a manual rebuild of the same commit ($env:BUILD_SOURCEVERSION). Otherwise, rectify the issue and merge the changes into master/main to trigger a CI build."
          }
        }
      }

      # If we get here, any failed publish attempts were because the package already exists
      exit 0
    displayName: "Push"
    condition: and(succeeded(), ne(variables['newVersion'], ''))
  - template: "../shared/tag-commit.yml"
    parameters:
      githubPat: ${{parameters.githubPat}}